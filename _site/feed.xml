<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dumpleHM - Beautiful Dreamer</title>
    <description></description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 04 Oct 2016 18:15:24 +0900</pubDate>
    <lastBuildDate>Tue, 04 Oct 2016 18:15:24 +0900</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>로컬스토리지</title>
        <description>&lt;p&gt;HTML5에서는 클라이언트에 데이터를 저장하는 2개의 객체를 제공한다. 하나의 세션 단위로 데이터를 저장하는 SessionStorage 와, 만료 기간이 없는 LocalStorage 가 있다.&lt;/p&gt; &lt;p&gt;두 가지 모두 key/value 쌍으로 저장하며, 사용 방법은 거의 비슷하다.&lt;/p&gt; &lt;h3 id=&quot;section&quot;&gt;사용법&lt;/h3&gt; &lt;p&gt;사용법은 정말 간단하다. 전역으로 할당되어 있는 localStorage의 메서드를 사용하며, 데이터는 key/value 쌍으로 구성된다.&lt;/p&gt; &lt;p&gt;아래와 같이 setItem() 과 getItem()으로 값을 저장하거나 가져올 수 있다.&lt;/p&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;localStorage.setItem('foo', 'bar'); localStorage.getItem('foo'); //--&amp;gt; &quot;bar&quot; &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;주의할 것은 key와 value 모두 string 으로 저장된다는 것이다. 예를 들어, 아래 코드에서처럼 원시 타입으로 저장해도, 가져오는 값의 타입은 string 이다.&lt;/p&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var n = 1; localStorage.setItem('n', n); typeof localStorage.getItem('n'); //--&amp;gt; &quot;string&quot; &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;Object...</description>
        <pubDate>Wed, 07 Sep 2016 00:00:00 +0900</pubDate>
        <link>/LocalStorage/</link>
        <guid isPermaLink="true">/LocalStorage/</guid>
        
        <category>HTML5</category>
        
        <category>LocalStorage</category>
        
        <category>로컬스토리지</category>
        
        
        <category>HTML</category>
        
      </item>
    
      <item>
        <title>연관배열</title>
        <description>&lt;p&gt;일반적으로 숫자를 키로 값을 뽑을 수 있는 데이터 구조를 배열이라 하며, 배열의 키는 연속하는 숫자이므로 순서가 있는 값의 모음으로 볼수 있다.&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;item1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;item2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;item3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;item4&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;item1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;item2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;item3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;위와 같은 일반적인 방법 이외에도 인덱스 대신 문자열을 이용하여 접근 가능하다.&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span...</description>
        <pubDate>Sat, 03 Sep 2016 00:00:00 +0900</pubDate>
        <link>/%E1%84%8B%E1%85%A7%E1%86%AB%E1%84%80%E1%85%AA%E1%86%AB%E1%84%87%E1%85%A2%E1%84%8B%E1%85%A7%E1%86%AF/</link>
        <guid isPermaLink="true">/%E1%84%8B%E1%85%A7%E1%86%AB%E1%84%80%E1%85%AA%E1%86%AB%E1%84%87%E1%85%A2%E1%84%8B%E1%85%A7%E1%86%AF/</guid>
        
        <category>javaScript</category>
        
        <category>자바스크립트</category>
        
        <category>배열</category>
        
        <category>연관배열</category>
        
        <category>Array</category>
        
        <category>array</category>
        
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>Sandbox Pattern</title>
        <description>&lt;p&gt;네임스페이스 패턴에서는 단 하나의 전역 객체를 생성했다. 샌드박스 패턴에서는 생성자를 유일한 전역으로 사용한다. 그리고 유일한 전역인 생성자에게 콜백함수를 전달해 모든 기능을 샌드박스 내부 환경으로 격리 시키는 방법을 사용한다.&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Sandbox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// argument를 배열로 바꾼다&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 마지막 인자는 콜백 함수 &lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 모듈은 배열로 전달될 수도있고 개별 인자로 전달 될 수도 있다&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;modules&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;...</description>
        <pubDate>Mon, 29 Aug 2016 00:00:00 +0900</pubDate>
        <link>/sanbox/</link>
        <guid isPermaLink="true">/sanbox/</guid>
        
        <category>javaScript</category>
        
        <category>Sandbox Pattern</category>
        
        <category>pattern</category>
        
        <category>자바스크립트</category>
        
        <category>샌드박스 패턴</category>
        
        <category>패턴</category>
        
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>Namespace Pattern</title>
        <description>&lt;p&gt;전역변수를 기초로 하는 JavaScript의 단점 때문에 전역 네임스페이스의 오염문제는 많이 신경쓰이는 부분이다. 여러 스크립트가 한 페이지 안에 함꼐 있는 소스코드에서는 전역변수가 많아질 수록 이름이 겹칠 우려가 있다. 뿐만 아니라 어느 곳에서든 접근할 수 있으므로 소스코드의 신뢰성을 떨어뜨릴 수 있다. 이러한 단점을 보완하기 위한 방법으로 네임스페이스 패턴이 있다.&lt;/p&gt; &lt;h3 id=&quot;var-&quot;&gt;1. var 사용&lt;/h3&gt; &lt;p&gt;JavaScript 에는 암묵적 전역이라는 개념이 있다. var를 사용하지 않고 변수를 선언하거나 선언되지 않은 변수를 사용하면 아무리 지역함수 내에 있더라도 전역에 속하게 된다. 정확히 말하면 전역변수가 아닌 전역객체의 프로퍼티로 생성된다.&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/* * a : 함수에 속하지 않고 var를 사용하여 선언된 전역 변수 * b : 함수에...</description>
        <pubDate>Wed, 24 Aug 2016 00:00:00 +0900</pubDate>
        <link>/namespace/</link>
        <guid isPermaLink="true">/namespace/</guid>
        
        <category>javaScript</category>
        
        <category>Namespace Pattern</category>
        
        <category>pattern</category>
        
        <category>자바스크립트</category>
        
        <category>네임스페이스 패턴</category>
        
        <category>패턴</category>
        
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>$.proxy()</title>
        <description>&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// store reference to this&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;change&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// captures self in a closure&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;this.name에서의 this는 Person이라는 함수를 가리키고 있을 것이다. Person 함수를 내부에서도 가리킬 필요가 있다면 어떻게 해야할까? 우리는 이 함수를 생성한 객체를 가리키고 있는 this를 끌고 내려오기 위해, this의 주소를 self라는...</description>
        <pubDate>Tue, 23 Aug 2016 00:00:00 +0900</pubDate>
        <link>/$.proxy()/</link>
        <guid isPermaLink="true">/$.proxy()/</guid>
        
        <category>javaScript</category>
        
        <category>jQuery</category>
        
        <category>$.proxy</category>
        
        <category>자바스크립트</category>
        
        <category>제이쿼리</category>
        
        <category>proxy</category>
        
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>Prototype</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;프로토타입 기반 프로그래밍이란?&lt;/h2&gt; &lt;blockquote&gt; &lt;p&gt;객체의 원형인 프로토타입을 이용하여 새로운 객체를 만들어내는 프로그래밍 기법이다. 이렇게 만들어진 객체 역시 자기자신의 프로토타입을 갖는다. 이 새로운 객체의 원형을 이용하면 또 다른 새로운 객체를 만들어 낼 수도 있으며 이런 구조로 객체를 확장하는 방식을 프로토타입 기반 프로그래밍이라고 한다.&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;이 프로토타입 기반 프로그래밍은 Class 기반 OOP언어를 다루던 사람에게는 이해가 잘 안가는 부분 일 수도 있다. Class기반의 언어에서는 Class 안에 기술된 내용을 기반으로 인스턴스를 생성하여 객체를 사용한다. 하지만 자바스크립트는 Class가 존재하지 않는다. 그래서 자바스크립트에서는 객체의 원형인 프로토타입을 이용한 클로닝(Cloning:복사)과 객체특성을 확장해 나가는 방식을 통해 새로운 객체를 생성해 낸다.자바스크립트 응용에서 다룰 프로그래밍 패턴과 연관된 재밌는 사실중 하나는...</description>
        <pubDate>Tue, 23 Aug 2016 00:00:00 +0900</pubDate>
        <link>/prototype/</link>
        <guid isPermaLink="true">/prototype/</guid>
        
        <category>javaScript</category>
        
        <category>prototype</category>
        
        <category>자바스크립트</category>
        
        <category>프로토타입</category>
        
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>Hoisting</title>
        <description>&lt;p&gt;호이스트(Hoist: 끌어 올리다)현상 현재 영역(Scope)의 최상단으로 변수 이름 또는 함수 선언문이 끌어올려지는 것을 말한다.&lt;/p&gt; &lt;h3 id=&quot;variable-scope&quot;&gt;1. 변수 범위 (Variable Scope)&lt;/h3&gt; &lt;p&gt;변수 범위는 변수가 존재하는 컨텍스트이다. 이것은 어디에서 변수에 접근할 수 있는지, 그 컨텍스트에서 변수에 접근할 수 있는지를 명시적으로 나타낸다. 변수는 지역 범위(local scope)와 전역 범위(global scope) 둘 중 하나를 가진다.&lt;/p&gt; &lt;h4 id=&quot;section&quot;&gt;1-1. 지역 변수 (함수 수준 범위)&lt;/h4&gt; &lt;p&gt;대부분의 프로그래밍 언어와 달리, 자바스크립트는 블럭-수준(block-level)의 범위를 가지고 있지는 않다. 대신, 자바스크립트는 함수-수준(function-level)의 범위를 가진다. 함수내에 정의된 변수는 지역 범위를 가지며, 해당 함수와 내부 함수에서만 접근이 가능하다.&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//함수-수준 범위의 예제&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Richard&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;...</description>
        <pubDate>Tue, 23 Aug 2016 00:00:00 +0900</pubDate>
        <link>/hoisting/</link>
        <guid isPermaLink="true">/hoisting/</guid>
        
        <category>javascript</category>
        
        <category>hoisting</category>
        
        <category>자바스크립트</category>
        
        <category>호이스팅</category>
        
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>Cloure</title>
        <description>&lt;p&gt;외부함수( 포함하고 있는 )의 변수에 접근할 수 있는 내부 함수를 일컫는다. 스코프 체인으로 표현되기도 하며, 클로저는 세가지 스코프 체인을 가진다.&lt;/p&gt; &lt;ol&gt; &lt;li&gt;자신에 대한 접근( 자신의 블럭내에 정의 된 변수 )&lt;/li&gt; &lt;li&gt;외부 함수의 변수에 대한 접근&lt;/li&gt; &lt;li&gt;전역 변수에 대한 접근&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;내부함수는 외부함수의 변수 뿐만 아니라 파라미터에도 접근할 수 있다. 단 내부함수는 외부함수의 arguments 객체를 호출할 수는 없다. 하지만 외부 함수의 파라미터는 직접 호출할 수 있다.&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;showName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nameIntro&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Your name is &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 이 내부 함수는 외부함수의 변수뿐만 아니라...</description>
        <pubDate>Tue, 23 Aug 2016 00:00:00 +0900</pubDate>
        <link>/cloure/</link>
        <guid isPermaLink="true">/cloure/</guid>
        
        <category>javaScript</category>
        
        <category>cloure</category>
        
        <category>자바스크립트</category>
        
        <category>클로저</category>
        
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>Scope</title>
        <description>&lt;h3 id=&quot;scope&quot;&gt;1. 유효범위(Scope)&lt;/h3&gt;
&lt;p&gt;영역, 범위라는 뜻이다. 하지만 프로그램 언어에서의 유효범위는 어느범위까지 참조하는지…즉 변수와 매개변수의 접근성과 생존기간을 뜻한다. 유효범위 개념을 잘 알고 있다면 변수와 매개변수의 접근성과 생존기간을 제어할 수 있다. 유효범위 종류는 크게 두가지가 있으며 하나는 전역유효(Global Scope), 또 하나는 지역 유효범위(Local Scope)이다. 전역 유효범위는 스크립트 전체에서 참조되는 것을 의미하는데, 말 그대로 스크립트 내 어느곳에서든 참조된다. 지역 유효범위는 정의된 함수 안에서만 참조되는 것을 의미하며 함수 밖에서는 참조하지 못한다.&lt;/p&gt;

&lt;p&gt;http://www.nextree.co.kr/p7363/&lt;/p&gt;
</description>
        <pubDate>Mon, 22 Aug 2016 00:00:00 +0900</pubDate>
        <link>/scope/</link>
        <guid isPermaLink="true">/scope/</guid>
        
        <category>javascript</category>
        
        <category>scope</category>
        
        <category>자바스크립트</category>
        
        <category>스코프</category>
        
        
        <category>javascript</category>
        
      </item>
    
  </channel>
</rss>
